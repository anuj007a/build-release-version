name: Create Release on New Tag

on:
  workflow_run:
    workflows:
      - Auto-Increment Version Tag  # Exact name of Script 1
    types:
      - completed  # Trigger after Script 1 completes

jobs:
  create-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Permission to create releases

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch All Tags
        run: git fetch --tags

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          # Get the latest tag matching the pattern "test-tag-v*"
          latest_tag=$(git tag --list "test-tag-v*" | sort -V | tail -n 1)

          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag found: $latest_tag"

      - name: Validate Latest Tag
        run: |
          latest_tag=${{ env.latest_tag }}
          if [ -z "$latest_tag" ]; then
            echo "Error: No valid latest tag found."
            exit 1
          fi

          if ! git tag --list | grep -q "^$latest_tag$"; then
            echo "Error: Tag $latest_tag does not exist in the repository."
            exit 1
          fi

      - name: Get Previous Tag
        id: get_previous_tag
        run: |
          tags=$(git tag --list "test-tag-v*" | sort -V)
          previous_tag=$(echo "$tags" | grep -B 1 "$latest_tag" | head -n 1)
          echo "previous_tag=$previous_tag" >> $GITHUB_ENV
          echo "Previous tag found: $previous_tag"

      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          latest_tag=${{ env.latest_tag }}
          previous_tag=${{ env.previous_tag }}

          if [[ -z "$previous_tag" ]]; then
            echo "No previous tag found. Generating release notes from the beginning of the repository."
            release_notes=$(git log --oneline "$latest_tag")
          else
            release_notes=$(git log --oneline "$previous_tag".."$latest_tag")
          fi

          echo "release_notes=$release_notes" >> $GITHUB_ENV

      - name: Prepare Release Name
        id: prepare_release_name
        run: |
          latest_tag=${{ env.latest_tag }}
          release_name="Release - $latest_tag - $(date +'%d-%m-%Y')"
          echo "release_name=$release_name" >> $GITHUB_ENV
          echo "Release Name: $release_name"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.latest_tag }}
          name: ${{ env.release_name }}
          body: |
            ### Release Notes:
            ${{ env.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}